from os.path import join

import pandas as pd
import numpy as np

from tqdm.auto import tqdm

import obonet
import networkx
import os 

new_directory = "/mnt/aiongpfs/projects/glad_seq/Platform/Atlas/CellXGene-census/human/download/"
os.chdir(new_directory)



url = 'https://github.com/obophenotype/cell-ontology/releases/download/v2024-09-26/cl-simple.obo'
graph = obonet.read_obo(url)

# only use "is_a" edges
edges_to_delete = []
for i, x in enumerate(graph.edges):
    if x[2] != 'is_a':
        edges_to_delete.append((x[0], x[1]))
for x in edges_to_delete:
    graph.remove_edge(u=x[0], v=x[1])

# define mapping from id to name
id_to_name = {id_: data.get('name') for id_, data in graph.nodes(data=True)}
# define inverse mapping from name to id
name_to_id = {v: k for k, v in id_to_name.items()}


def find_child_nodes(cell_type):
    return [id_to_name[node] for node in networkx.ancestors(graph, name_to_id[cell_type])]


def find_parent_nodes(cell_type):
    return [id_to_name[node] for node in networkx.descendants(graph, name_to_id[cell_type])]
    

import cellxgene_census


census = cellxgene_census.open_soma(census_version = "2024-07-01")
summary = census["census_info"]['summary']
PROTOCOLS = [
    "10x 5' v2", 
    "10x 3' v3", 
    "10x 3' v2", 
    "10x 5' v1", 
    "10x 3' v1", 
    "10x 3' transcription profiling", 
    "10x 5' transcription profiling"
]


COLUMN_NAMES = [
    "soma_joinid",
    "is_primary_data",
    "dataset_id", 
    "donor_id",
    "assay", 
    "cell_type", 
    "development_stage", 
    "disease", 
    "tissue", 
    "tissue_general"
]

obs = (
    census["census_data"]["homo_sapiens"]
    .obs
    .read(
        column_names=COLUMN_NAMES,
        value_filter=f"is_primary_data == True and assay in {PROTOCOLS}"
    )
    .concat()
    .to_pandas()
)

obs=obs[obs['disease']=='normal']


obs['tech_sample'] = (obs['dataset_id'].astype(str) + '_' + obs['donor_id'].astype(str)).astype('category')
for col in COLUMN_NAMES:
    if obs[col].dtype == object:
        obs[col] = obs[col].astype('category')

obs.dtypes

# remove all cell types which are not a subtype of native cell
cell_types_to_remove = obs[~obs.cell_type.isin(find_child_nodes('cell'))].cell_type.unique().tolist()

# remove all cell types which have less than 2000 cells
cell_freq = obs.cell_type.value_counts()
cell_types_to_remove += cell_freq[cell_freq < 2000].index.tolist()

# remove cell types which have less than 20 tech_samples
tech_samples_per_cell_type = obs[['cell_type', 'tech_sample']].groupby('cell_type').agg({'tech_sample': 'nunique'}).sort_values('tech_sample')
cell_types_to_remove += tech_samples_per_cell_type[tech_samples_per_cell_type.tech_sample <= 20].index.tolist() 

# remove all cells that have <= 2 parents in the cell ontology
cell_types = obs.cell_type.unique().tolist()
cell_types = [ct for ct in obs.cell_type.unique() if ct in name_to_id]

n_children = []
n_parents = []

for cell_type in cell_types:
    n_parents.append(len(find_parent_nodes(cell_type)))
    n_children.append(len(find_child_nodes(cell_type)))

cell_types_to_remove += (
    pd.DataFrame({'n_children': n_children, 'n_parents': n_parents}, index=cell_types)
    .query('n_parents <= 2')
    .index.tolist()
)
cell_types_to_remove = list(set(cell_types_to_remove))

obs.cell_type.nunique() - len(cell_types_to_remove)

obs_subset = obs[~obs.cell_type.isin(cell_types_to_remove)].copy()
for col in obs_subset.columns:
    if obs_subset[col].dtype == 'category':
        obs_subset[col] = obs_subset[col].cat.remove_unused_categories()
obs_subset


cell_types_to_keep = obs_subset.cell_type.unique().tolist()




# downaload DATA
BASE_PATH = "/mnt/aiongpfs/projects/glad_seq/Platform/Atlas/CellXGene-census/human/download/"

for i, idxs in tqdm(enumerate(np.array_split(obs_subset.soma_joinid.to_numpy(), 20))):
    adata = cellxgene_census.get_anndata(
        census=census,
        organism="Homo sapiens",
        X_name='raw',
        obs_coords=idxs.tolist(),
        column_names={"obs": COLUMN_NAMES, "var": ['feature_id', 'feature_name']},
    )
    adata.write_h5ad(join(BASE_PATH, f'{i}.h5ad'))
